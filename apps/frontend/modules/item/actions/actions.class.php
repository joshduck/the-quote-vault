<?php
// auto-generated by sfPropelCrud
// date: 2007/08/19 16:25:57
?>
<?php

/**
 * item actions.
 *
 * @package		quotes
 * @subpackage item
 * @author		 Your name here
 * @version		SVN: $Id: actions.class.php 3335 2007-01-23 16:19:56Z fabien $
 */
class itemActions extends sfActions
{
	public function executeIndex()
	{
		return $this->forward('item', 'list');
	}

	public function executeRandom()
	{
		$item = ItemPeer::retrieveRandom();
		$this->redirect('item/show?slug=' . $item->getSlug());
	}

	public function executeShow()
	{
		$this->item = ItemPeer::retrieveBySlug($this->getRequestParameter('slug'));
		$this->forward404Unless($this->item && $this->item->isPublic());
		TitleHelper::setTitle($this->item->getText());

		$this->rating = $this->item->getRatingForUser($_SERVER['REMOTE_ADDR'], null);

		$this->pager = new sfPropelPager('Comment', 10);
		$this->pager->setCriteria($this->item->getCommentsCriteria());
		$this->pager->setPage($this->getRequestParameter('page', 1));
		$this->pager->init();
	}

	public function executeCreate()
	{
		$this->item = new Item();
		$this->setTemplate('edit');
	}

	public function executeEdit()
	{
		$this->item = ItemPeer::retrieveBySlug($this->getRequestParameter('slug'));
		$this->forward404Unless($this->item);
	}

	public function executeUpdate()
	{
		if (!$this->getRequestParameter('id'))
		{
			$item = new Item();
		}
		else
		{
			$item = ItemPeer::retrieveByPk($this->getRequestParameter('id'));
			$this->forward404Unless($item);
		}

		$item->setUserId($this->getRequestParameter('user_id') ? $this->getRequestParameter('user_id') : null);
		$item->setText($this->getRequestParameter('text'));
		if ($this->getRequestParameter('date'))
		{
			list($d, $m, $y) = sfI18N::getDateForCulture($this->getRequestParameter('date'), $this->getUser()->getCulture());
			$item->setDate("$y-$m-$d");
		}
		$item->setCreatorId($this->getRequestParameter('creator_id') ? $this->getRequestParameter('creator_id') : null);
		$item->setCategoryId($this->getRequestParameter('category_id') ? $this->getRequestParameter('category_id') : null);
		$item->save();

		$tags = array();
		$tagTexts = split(',', preg_replace('/ +/', ' ', preg_replace('/[^a-zA-Z0-9\,\- ]/', '', $this->getRequestParameter('tags'))));
		foreach ($tagTexts as $tagText)
		{
			$tags[] = TagPeer::retrieveOrCreateByName(trim($tagText));
		}
		$item->setTags($tags);

		$item->save();
		return $this->redirect('item/show?slug='.$item->getSlug());
	}

	public function executeRate()
	{
		$item = ItemPeer::retrieveBySlug($this->getRequestParameter('slug'));
		$this->forward404Unless($item && $item->isPublic());

		$value = $this->getRequestParameter('rating');
		if ($value <= 5 && $value >= 1)
		{
			$rating = RatingPeer::retrieveByItemAndUser($item, $_SERVER['REMOTE_ADDR'], null);
			if (!$rating)
			{
				$rating = new Rating();
				$rating->setItemId($item->getId());
				$rating->setUserIp($_SERVER['REMOTE_ADDR']);
			}
			$rating->setRating($value);
			$rating->save();
		}

		return $this->redirect('item/show?slug=' . $item->getSlug());
	}
}
