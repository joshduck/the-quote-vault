<?php
// auto-generated by sfPropelCrud
// date: 2007/08/18 22:59:53
?>
<?php

/**
 * comment actions.
 *
 * @package		quotes
 * @subpackage comment
 * @author		 Your name here
 * @version		SVN: $Id: actions.class.php 3335 2007-01-23 16:19:56Z fabien $
 */
class commentActions extends sfActions
{
	private function authenticateCommentEdit($comment, $checkUser = true, $checkAge = true)
	{
		if ($checkUser)
		{
			$this->forwardUnless($comment->belongsToUser(), 'comment', 'denied');
		}
		
		if ($checkAge)
		{
			$this->forwardIf($comment->hasEditTimedOut(), 'comment', 'denied');
		}
	}

	public function executeDenied()
	{
		header('HTTP/1.1 403 Rermission Denied');
		$this->item = ItemPeer::retrieveBySlug($this->getRequestParameter('item_slug'));
		if (!$this->item)
		{
			$this->item = CommentPeer::retrieveByPk($this->getRequestParameter('id'))->getItem();
		}
	}

	public function executeEdit()
	{
		$this->comment = CommentPeer::retrieveByPk($this->getRequestParameter('id'));
		if (!$this->comment)
		{
			//Is a new comment
			$this->item = ItemPeer::retrieveBySlug($this->getRequestParameter('item_slug'));
			if ($this->item)
			{
				$this->comment = new Comment();
				$this->comment->setItemId($this->item->getId());
			}
		}
		else
		{
			$this->authenticateCommentEdit($this->comment);
		}
		$this->forward404Unless($this->comment);
		
		//Show the user's latest input
		if ($this->getRequestParameter('user_name'))
			$this->comment->setUserName($this->getRequestParameter('user_name'));
		if ($this->getRequestParameter('text'))
			$this->comment->setText($this->getRequestParameter('text'));
	}

	public function handleErrorUpdate()
	{
		$this->forward('comment', 'edit');
	}

	public function executeUpdate()
	{
		if (!$this->getRequestParameter('id'))
		{
			$item = ItemPeer::retrieveBySlug($this->getRequestParameter('item_slug'));
			if ($item)
			{
				$comment = new Comment();
				$comment->setApproved(true);
				$comment->setItemId($item->getId());
				$comment->setUserIp($_SERVER['REMOTE_ADDR']);
			}
		}
		else
		{
			$comment = CommentPeer::retrieveByPk($this->getRequestParameter('id'));
			$this->forward404Unless($comment);
			$this->authenticateCommentEdit($comment);
			$item = $comment->getItem();		
		}

		if ($comment)
		{
			$comment->setUserName($this->getRequestParameter('user_name'));
			$comment->setText($this->getRequestParameter('text'));

			if (!$this->getRequestParameter('email'))
			{
				$comment->save();
			}
		}
		return $this->redirect('item/show?slug='.$item->getSlug());
	}

	public function executeDelete()
	{
		$comment = CommentPeer::retrieveByPk($this->getRequestParameter('id'));
		$this->forward404Unless($comment);
		$this->authenticateCommentEdit($comment, true, false);
		$comment->setDeleted(true);
		$comment->save();
		return $this->redirect('item/show?slug=' . $comment->getItem()->getSlug());
	}
}
